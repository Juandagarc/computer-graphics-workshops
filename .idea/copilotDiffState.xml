<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/workshop-1/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/workshop-1/main.py" />
              <option name="originalContent" value="import curses&#10;from exercise_1 import Object&#10;from exercise_2 import Distance&#10;from exercise_3 import MRUA&#10;from exercise_4 import sum_of_vectors&#10;from exercise_5 import scalar_product&#10;from exercise_6 import ProjectileMotion&#10;&#10;&#10;def get_valid_input(stdscr, prompt, input_type=&quot;float&quot;, min_val=None, max_val=None):&#10;    &quot;&quot;&quot;Función para obtener entrada válida del usuario con validación&quot;&quot;&quot;&#10;    while True:&#10;        stdscr.clear()&#10;        stdscr.addstr(0, 0, prompt)&#10;        stdscr.addstr(1, 0, &quot;Ingrese su respuesta: &quot;)&#10;        stdscr.refresh()&#10;&#10;        try:&#10;            user_input = stdscr.getstr().decode().strip()&#10;&#10;            if input_type == &quot;int&quot;:&#10;                value = int(user_input)&#10;            elif input_type == &quot;float&quot;:&#10;                value = float(user_input)&#10;            elif input_type == &quot;string&quot;:&#10;                if not user_input:&#10;                    raise ValueError(&quot;La entrada no puede estar vacía&quot;)&#10;                return user_input&#10;            elif input_type == &quot;vector&quot;:&#10;                # Para vectores separados por comas&#10;                if not user_input:&#10;                    raise ValueError(&quot;La entrada no puede estar vacía&quot;)&#10;                vector = [float(x.strip()) for x in user_input.split(',')]&#10;                if len(vector) == 0:&#10;                    raise ValueError(&quot;El vector debe tener al menos un elemento&quot;)&#10;                return vector&#10;&#10;            # Validar rango si se especifica&#10;            if min_val is not None and value &lt; min_val:&#10;                raise ValueError(f&quot;El valor debe ser mayor o igual a {min_val}&quot;)&#10;            if max_val is not None and value &gt; max_val:&#10;                raise ValueError(f&quot;El valor debe ser menor o igual a {max_val}&quot;)&#10;&#10;            return value&#10;&#10;        except ValueError as e:&#10;            stdscr.clear()&#10;            stdscr.addstr(0, 0, f&quot;Error: {str(e)}&quot;)&#10;            stdscr.addstr(1, 0, &quot;Entrada inválida. Intente nuevamente.&quot;)&#10;            stdscr.addstr(2, 0, &quot;Presione cualquier tecla para continuar...&quot;)&#10;            stdscr.refresh()&#10;            stdscr.getch()&#10;&#10;&#10;def show_result(stdscr, message):&#10;    &quot;&quot;&quot;Función para mostrar resultados y esperar entrada del usuario&quot;&quot;&quot;&#10;    stdscr.clear()&#10;    lines = message.split('\n')&#10;    for i, line in enumerate(lines):&#10;        stdscr.addstr(i, 0, line)&#10;    stdscr.addstr(len(lines) + 1, 0, &quot;Presione cualquier tecla para volver al menú...&quot;)&#10;    stdscr.refresh()&#10;    stdscr.getch()&#10;&#10;&#10;# Function to display the menu&#10;def menu(stdscr):&#10;    curses.curs_set(1)  # Show cursor for input&#10;&#10;    options = [&#10;        &quot;1. Object Falling&quot;,&#10;        &quot;2. Distance Conversion&quot;,&#10;        &quot;3. MRUA (Uniform Acceleration)&quot;,&#10;        &quot;4. Sum of Vectors&quot;,&#10;        &quot;5. Scalar Product of Vectors&quot;,&#10;        &quot;6. Projectile Motion&quot;,&#10;        &quot;7. Exit&quot;&#10;    ]&#10;&#10;    while True:&#10;        stdscr.clear()&#10;        height, width = stdscr.getmaxyx()&#10;&#10;        # Mostrar título&#10;        title = &quot;=== MENÚ PRINCIPAL ===&quot;&#10;        x = width // 2 - len(title) // 2&#10;        y = height // 2 - len(options) // 2 - 2&#10;        stdscr.addstr(y, x, title)&#10;&#10;        # Mostrar opciones&#10;        for i, option in enumerate(options):&#10;            x = width // 2 - len(option) // 2&#10;            y = height // 2 - len(options) // 2 + i&#10;            stdscr.addstr(y, x, option)&#10;&#10;        # Solicitar entrada del usuario&#10;        prompt_y = height // 2 + len(options) // 2 + 2&#10;        stdscr.addstr(prompt_y, 0, &quot;Seleccione una opción (1-7): &quot;)&#10;        stdscr.refresh()&#10;&#10;        try:&#10;            choice = stdscr.getstr().decode().strip()&#10;&#10;            if not choice.isdigit():&#10;                raise ValueError(&quot;Debe ingresar un número&quot;)&#10;&#10;            choice = int(choice)&#10;&#10;            if choice &lt; 1 or choice &gt; 7:&#10;                raise ValueError(&quot;Debe ingresar un número entre 1 y 7&quot;)&#10;&#10;            if choice == 1:&#10;                # Exercise 1: Object Falling&#10;                try:&#10;                    weight = get_valid_input(stdscr, &quot;Ejercicio 1: Caída de Objeto\nIngrese el peso del objeto (kg):&quot;, &quot;float&quot;, min_val=0.1)&#10;                    ball = Object('ball', weight)&#10;                    result = f&quot;El tiempo de caída para una {ball.name} de {ball.weight}kg desde 10m es: {ball.get_time_of_falling(10):.2f} segundos.&quot;&#10;                    show_result(stdscr, result)&#10;                except Exception as e:&#10;                    show_result(stdscr, f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 2:&#10;                # Exercise 2: Distance Conversion&#10;                try:&#10;                    distance_input = get_valid_input(stdscr, &quot;Ejercicio 2: Conversión de Distancia\nIngrese distancia (valor + unidad, ej: '30 km/h'):&quot;, &quot;string&quot;)&#10;                    parts = distance_input.split()&#10;                    if len(parts) != 2:&#10;                        raise ValueError(&quot;Formato incorrecto. Use: valor unidad (ej: '30 km/h')&quot;)&#10;&#10;                    value = float(parts[0])&#10;                    unit = parts[1]&#10;                    distance = Distance(value, unit)&#10;                    distance.convert()&#10;                    show_result(stdscr, &quot;Conversión completada. Revise la consola para ver los resultados.&quot;)&#10;                except Exception as e:&#10;                    show_result(stdscr, f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 3:&#10;                # Exercise 3: MRUA&#10;                try:&#10;                    velocity = get_valid_input(stdscr, &quot;Ejercicio 3: MRUA (Aceleración Uniforme)\nIngrese velocidad inicial (m/s):&quot;, &quot;float&quot;)&#10;                    time = get_valid_input(stdscr, &quot;Ingrese tiempo (s):&quot;, &quot;float&quot;, min_val=0)&#10;                    acceleration = get_valid_input(stdscr, &quot;Ingrese aceleración (m/s²):&quot;, &quot;float&quot;)&#10;&#10;                    car = MRUA(velocity, time, acceleration)&#10;                    result = f&quot;La distancia para un carro moviéndose a {car.initial_velocity} m/s, con aceleración de {car.acceleration} m/s² durante {car.time} segundos es: {car.get_distance():.2f} metros.&quot;&#10;                    show_result(stdscr, result)&#10;                except Exception as e:&#10;                    show_result(stdscr, f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 4:&#10;                # Exercise 4: Sum of Vectors&#10;                try:&#10;                    vector_1 = get_valid_input(stdscr, &quot;Ejercicio 4: Suma de Vectores\nIngrese vector 1 (separado por comas, ej: 1,2,3):&quot;, &quot;vector&quot;)&#10;                    vector_2 = get_valid_input(stdscr, &quot;Ingrese vector 2 (separado por comas, ej: 4,5,6):&quot;, &quot;vector&quot;)&#10;&#10;                    if len(vector_1) != len(vector_2):&#10;                        raise ValueError(&quot;Los vectores deben tener la misma dimensión&quot;)&#10;&#10;                    result = sum_of_vectors(vector_1, vector_2)&#10;                    show_result(stdscr, f&quot;La suma de vectores es: {result}&quot;)&#10;                except Exception as e:&#10;                    show_result(stdscr, f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 5:&#10;                # Exercise 5: Scalar Product&#10;                try:&#10;                    vector_1 = get_valid_input(stdscr, &quot;Ejercicio 5: Producto Escalar\nIngrese vector 1 (separado por comas, ej: 1,2,3):&quot;, &quot;vector&quot;)&#10;                    vector_2 = get_valid_input(stdscr, &quot;Ingrese vector 2 (separado por comas, ej: 4,5,6):&quot;, &quot;vector&quot;)&#10;&#10;                    if len(vector_1) != len(vector_2):&#10;                        raise ValueError(&quot;Los vectores deben tener la misma dimensión&quot;)&#10;&#10;                    result = scalar_product(vector_1, vector_2)&#10;                    show_result(stdscr, f&quot;El producto escalar es: {result}&quot;)&#10;                except Exception as e:&#10;                    show_result(stdscr, f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 6:&#10;                # Exercise 6: Projectile Motion&#10;                try:&#10;                    velocity = get_valid_input(stdscr, &quot;Ejercicio 6: Movimiento Proyectil\nIngrese velocidad inicial (m/s):&quot;, &quot;float&quot;, min_val=0)&#10;                    angle = get_valid_input(stdscr, &quot;Ingrese ángulo de lanzamiento (grados):&quot;, &quot;float&quot;, min_val=0, max_val=90)&#10;&#10;                    projectile = ProjectileMotion(initial_velocity=velocity, launch_angle_degrees=angle)&#10;                    result = f&quot;Alcance máximo: {projectile.get_max_range():.2f} metros\nAltura máxima: {projectile.get_max_height():.2f} metros&quot;&#10;                    show_result(stdscr, result)&#10;                except Exception as e:&#10;                    show_result(stdscr, f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 7:&#10;                # Exit&#10;                break&#10;&#10;        except ValueError as e:&#10;            stdscr.clear()&#10;            stdscr.addstr(0, 0, f&quot;Error: {str(e)}&quot;)&#10;            stdscr.addstr(1, 0, &quot;Presione cualquier tecla para continuar...&quot;)&#10;            stdscr.refresh()&#10;            stdscr.getch()&#10;&#10;&#10;# Start the curses application&#10;if __name__ == &quot;__main__&quot;:&#10;    curses.wrapper(menu)&#10;" />
              <option name="updatedContent" value="import os&#10;from exercise_1 import Object&#10;from exercise_2 import Distance&#10;from exercise_3 import MRUA&#10;from exercise_4 import sum_of_vectors&#10;from exercise_5 import scalar_product&#10;from exercise_6 import ProjectileMotion&#10;&#10;&#10;def clear_screen():&#10;    &quot;&quot;&quot;Limpiar la pantalla de la consola&quot;&quot;&quot;&#10;    os.system('cls' if os.name == 'nt' else 'clear')&#10;&#10;&#10;def get_valid_input(prompt, input_type=&quot;float&quot;, min_val=None, max_val=None):&#10;    &quot;&quot;&quot;Función para obtener entrada válida del usuario con validación&quot;&quot;&quot;&#10;    while True:&#10;        try:&#10;            print(f&quot;\n{prompt}&quot;)&#10;            user_input = input(&quot;Ingrese su respuesta: &quot;).strip()&#10;&#10;            if input_type == &quot;int&quot;:&#10;                value = int(user_input)&#10;            elif input_type == &quot;float&quot;:&#10;                value = float(user_input)&#10;            elif input_type == &quot;string&quot;:&#10;                if not user_input:&#10;                    raise ValueError(&quot;La entrada no puede estar vacía&quot;)&#10;                return user_input&#10;            elif input_type == &quot;vector&quot;:&#10;                # Para vectores separados por comas&#10;                if not user_input:&#10;                    raise ValueError(&quot;La entrada no puede estar vacía&quot;)&#10;                vector = [float(x.strip()) for x in user_input.split(',')]&#10;                if len(vector) == 0:&#10;                    raise ValueError(&quot;El vector debe tener al menos un elemento&quot;)&#10;                return vector&#10;&#10;            # Validar rango si se especifica&#10;            if min_val is not None and value &lt; min_val:&#10;                raise ValueError(f&quot;El valor debe ser mayor o igual a {min_val}&quot;)&#10;            if max_val is not None and value &gt; max_val:&#10;                raise ValueError(f&quot;El valor debe ser menor o igual a {max_val}&quot;)&#10;&#10;            return value&#10;&#10;        except ValueError as e:&#10;            print(f&quot;\n❌ Error: {str(e)}&quot;)&#10;            print(&quot;Entrada inválida. Intente nuevamente.&quot;)&#10;            input(&quot;Presione Enter para continuar...&quot;)&#10;&#10;&#10;def show_result(message):&#10;    &quot;&quot;&quot;Función para mostrar resultados y esperar entrada del usuario&quot;&quot;&quot;&#10;    print(f&quot;\n{'='*50}&quot;)&#10;    print(&quot;RESULTADO:&quot;)&#10;    print(f&quot;{'='*50}&quot;)&#10;    print(message)&#10;    print(f&quot;{'='*50}&quot;)&#10;    input(&quot;\nPresione Enter para volver al menú...&quot;)&#10;&#10;&#10;def show_menu():&#10;    &quot;&quot;&quot;Mostrar el menú principal&quot;&quot;&quot;&#10;    clear_screen()&#10;    print(&quot;╔══════════════════════════════════════════════════╗&quot;)&#10;    print(&quot;║                MENÚ PRINCIPAL                    ║&quot;)&#10;    print(&quot;╠══════════════════════════════════════════════════╣&quot;)&#10;    print(&quot;║  1. Object Falling                               ║&quot;)&#10;    print(&quot;║  2. Distance Conversion                          ║&quot;) &#10;    print(&quot;║  3. MRUA (Uniform Acceleration)                  ║&quot;)&#10;    print(&quot;║  4. Sum of Vectors                               ║&quot;)&#10;    print(&quot;║  5. Scalar Product of Vectors                    ║&quot;)&#10;    print(&quot;║  6. Projectile Motion                            ║&quot;)&#10;    print(&quot;║  7. Exit                                         ║&quot;)&#10;    print(&quot;╚══════════════════════════════════════════════════╝&quot;)&#10;&#10;&#10;def main():&#10;    &quot;&quot;&quot;Función principal del programa&quot;&quot;&quot;&#10;    while True:&#10;        show_menu()&#10;        &#10;        try:&#10;            choice = input(&quot;\nSeleccione una opción (1-7): &quot;).strip()&#10;&#10;            if not choice.isdigit():&#10;                raise ValueError(&quot;Debe ingresar un número&quot;)&#10;&#10;            choice = int(choice)&#10;&#10;            if choice &lt; 1 or choice &gt; 7:&#10;                raise ValueError(&quot;Debe ingresar un número entre 1 y 7&quot;)&#10;&#10;            if choice == 1:&#10;                # Exercise 1: Object Falling&#10;                clear_screen()&#10;                print(&quot; EJERCICIO 1: CAÍDA DE OBJETO&quot;)&#10;                print(&quot;-&quot; * 40)&#10;                try:&#10;                    weight = get_valid_input(&quot;Ingrese el peso del objeto (kg):&quot;, &quot;float&quot;, min_val=0.1)&#10;                    ball = Object('ball', weight)&#10;                    result = f&quot;El tiempo de caída para una {ball.name} de {ball.weight}kg desde 10m es: {ball.get_time_of_falling(10):.2f} segundos.&quot;&#10;                    show_result(result)&#10;                except Exception as e:&#10;                    show_result(f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 2:&#10;                # Exercise 2: Distance Conversion&#10;                clear_screen()&#10;                print(&quot; EJERCICIO 2: CONVERSIÓN DE DISTANCIA&quot;)&#10;                print(&quot;-&quot; * 40)&#10;                try:&#10;                    distance_input = get_valid_input(&quot;Ingrese distancia (valor + unidad, ej: '30 km/h'):&quot;, &quot;string&quot;)&#10;                    parts = distance_input.split()&#10;                    if len(parts) != 2:&#10;                        raise ValueError(&quot;Formato incorrecto. Use: valor unidad (ej: '30 km/h')&quot;)&#10;&#10;                    value = float(parts[0])&#10;                    unit = parts[1]&#10;                    distance = Distance(value, unit)&#10;                    print(&quot;\n Realizando conversión...&quot;)&#10;                    distance.convert()&#10;                    show_result(&quot;Conversión completada. Los resultados se muestran arriba.&quot;)&#10;                except Exception as e:&#10;                    show_result(f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 3:&#10;                # Exercise 3: MRUA&#10;                clear_screen()&#10;                print(&quot; EJERCICIO 3: MRUA (ACELERACIÓN UNIFORME)&quot;)&#10;                print(&quot;-&quot; * 40)&#10;                try:&#10;                    velocity = get_valid_input(&quot;Ingrese velocidad inicial (m/s):&quot;, &quot;float&quot;)&#10;                    time = get_valid_input(&quot;Ingrese tiempo (s):&quot;, &quot;float&quot;, min_val=0)&#10;                    acceleration = get_valid_input(&quot;Ingrese aceleración (m/s²):&quot;, &quot;float&quot;)&#10;&#10;                    car = MRUA(velocity, time, acceleration)&#10;                    result = f&quot;La distancia para un carro moviéndose a {car.initial_velocity} m/s, con aceleración de {car.acceleration} m/s² durante {car.time} segundos es: {car.get_distance():.2f} metros.&quot;&#10;                    show_result(result)&#10;                except Exception as e:&#10;                    show_result(f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 4:&#10;                # Exercise 4: Sum of Vectors&#10;                clear_screen()&#10;                print(&quot;➕ EJERCICIO 4: SUMA DE VECTORES&quot;)&#10;                print(&quot;-&quot; * 40)&#10;                try:&#10;                    vector_1 = get_valid_input(&quot;Ingrese vector 1 (separado por comas, ej: 1,2,3):&quot;, &quot;vector&quot;)&#10;                    vector_2 = get_valid_input(&quot;Ingrese vector 2 (separado por comas, ej: 4,5,6):&quot;, &quot;vector&quot;)&#10;&#10;                    if len(vector_1) != len(vector_2):&#10;                        raise ValueError(&quot;Los vectores deben tener la misma dimensión&quot;)&#10;&#10;                    result = sum_of_vectors(vector_1, vector_2)&#10;                    show_result(f&quot;La suma de vectores es: {result}&quot;)&#10;                except Exception as e:&#10;                    show_result(f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 5:&#10;                # Exercise 5: Scalar Product&#10;                clear_screen()&#10;                print(&quot;✖️ EJERCICIO 5: PRODUCTO ESCALAR&quot;)&#10;                print(&quot;-&quot; * 40)&#10;                try:&#10;                    vector_1 = get_valid_input(&quot;Ingrese vector 1 (separado por comas, ej: 1,2,3):&quot;, &quot;vector&quot;)&#10;                    vector_2 = get_valid_input(&quot;Ingrese vector 2 (separado por comas, ej: 4,5,6):&quot;, &quot;vector&quot;)&#10;&#10;                    if len(vector_1) != len(vector_2):&#10;                        raise ValueError(&quot;Los vectores deben tener la misma dimensión&quot;)&#10;&#10;                    result = scalar_product(vector_1, vector_2)&#10;                    show_result(f&quot;El producto escalar es: {result}&quot;)&#10;                except Exception as e:&#10;                    show_result(f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 6:&#10;                # Exercise 6: Projectile Motion&#10;                clear_screen()&#10;                print(&quot; EJERCICIO 6: MOVIMIENTO PROYECTIL&quot;)&#10;                print(&quot;-&quot; * 40)&#10;                try:&#10;                    velocity = get_valid_input(&quot;Ingrese velocidad inicial (m/s):&quot;, &quot;float&quot;, min_val=0)&#10;                    angle = get_valid_input(&quot;Ingrese ángulo de lanzamiento (grados):&quot;, &quot;float&quot;, min_val=0, max_val=90)&#10;&#10;                    projectile = ProjectileMotion(initial_velocity=velocity, launch_angle_degrees=angle)&#10;                    result = f&quot;Alcance máximo: {projectile.get_max_range():.2f} metros\nAltura máxima: {projectile.get_max_height():.2f} metros&quot;&#10;                    show_result(result)&#10;                except Exception as e:&#10;                    show_result(f&quot;Error en el ejercicio: {str(e)}&quot;)&#10;&#10;            elif choice == 7:&#10;                # Exit&#10;                clear_screen()&#10;                print(&quot; ¡Gracias por usar el programa!&quot;)&#10;                print(&quot;¡Hasta luego!&quot;)&#10;                break&#10;&#10;        except ValueError as e:&#10;            print(f&quot;\n❌ Error: {str(e)}&quot;)&#10;            input(&quot;Presione Enter para continuar...&quot;)&#10;        except KeyboardInterrupt:&#10;            clear_screen()&#10;            print(&quot;\n Programa interrumpido por el usuario.&quot;)&#10;            print(&quot;¡Hasta luego!&quot;)&#10;            break&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>